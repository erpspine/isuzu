<?php

namespace App\Http\Controllers\fcaboard;

use App\Http\Controllers\Controller;
use App\Models\fcaboard\FcaBoard;
use App\Models\gcascore\GcaScore;
use App\Models\querydefect\Querydefect;
use DB;
use Illuminate\Http\Request;

class FcaBoardController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        try {
            $lot = [];
            $data = [];

            if (!empty($request->input('date'))) {
                $date = date_for_database($request->input('date'));
                $selected_date = $request->input('date');
                $start_date = date('Y-m-d 00:00:00', strtotime($date));
                $end_date = date('Y-m-d 23:59:59', strtotime($date));

                // Retrieve defects based on the date range
                $defects = Querydefect::with(['getqueryanswer.doneby', 'getqueryanswer.routing.category'])
                    ->whereBetween('created_at', [$start_date, $end_date])
                    ->get();

                // Retrieve DRR defects based on specific criteria
                $drr_defects = Querydefect::with(['getqueryanswer.doneby', 'getqueryanswer.routing.category'])
                    ->whereBetween('created_at', [$start_date, $end_date])
                    ->where(function ($query) {
                        $query->where('mpa_drr', 1)
                              ->orWhere('mpb_drr', 1);
                    })
                    ->get();

                // Retrieve CARE defects based on specific criteria
                $care = Querydefect::with(['getqueryanswer.doneby', 'getqueryanswer.routing.category'])
                    ->whereBetween('created_at', [$start_date, $end_date])
                    ->where('mpc_drr', 1)
                    ->get();

                // Retrieve GCA CV and GCA LCV data
                $gca_cv = FcaBoard::where('report_type', 'gca_cv')->where('date', $date)->get();
                $gca_lcv = FcaBoard::where('report_type', 'gca_lcv')->where('date', $date)->get();

                // Populate checkboxes for DRL, DRR, and CARE defects
                $drl_check = [];
                $drl_defect = [];
                $drr_check = [];
                $drr_defect = [];
                $care_check = [];
                $drr_care = [];

                foreach ($defects as $defect) {
                    $defect_id = $defect->id;

                    // Populate DRL checkboxes and defects
                    $drl_check[$defect_id] = FcaBoard::where('report_type', 'Drl')
                        ->where('date', $date)
                        ->where('ref_id', $defect_id)
                        ->exists();

                    $drl_defect[$defect_id] = $drl_check[$defect_id] ? FcaBoard::where('report_type', 'Drl')
                        ->where('date', $date)
                        ->where('ref_id', $defect_id)
                        ->first()->defect : '';

                    // Populate DRR checkboxes and defects
                    $drr_check[$defect_id] = FcaBoard::where('report_type', 'Drr')
                        ->where('date', $date)
                        ->where('ref_id', $defect_id)
                        ->exists();

                    $drr_defect[$defect_id] = $drr_check[$defect_id] ? FcaBoard::where('report_type', 'Drr')
                        ->where('date', $date)
                        ->where('ref_id', $defect_id)
                        ->first()->defect : '';

                    // Populate CARE checkboxes and defects
                    $care_check[$defect_id] = FcaBoard::where('report_type', 'Care')
                        ->where('date', $date)
                        ->where('ref_id', $defect_id)
                        ->exists();

                    $drr_care[$defect_id] = $care_check[$defect_id] ? FcaBoard::where('report_type', 'Care')
                        ->where('date', $date)
                        ->where('ref_id', $defect_id)
                        ->first()->defect : '';
                }

                return view('fcaboard.index')->with(compact('gca_cv', 'gca_lcv', 'care_check', 'drr_check', 'drl_check', 'selected_date', 'defects', 'drr_defects', 'care'));
            }

            return view('fcaboard.index')->with(compact('lot'));
        } catch (\Exception $e) {
            dd($e->getMessage()); // Debugging: Print error message
            return redirect()->back()->with('error', $e->getMessage()); // Redirect back with error message
        }
    }
    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }
    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
    try {
        $drl_data = [];
        $drr_data = [];
        $care_data = [];
        $gca_data = [];
        $gca_lcv_data = [];

        $date = date_for_database($request->input('date'));

        if (!empty($request->input('drl_check'))) {
            foreach ($request->input('drl_check') as $key => $value) {
                $drl_data[] = [
                    'ref_id' => $value,
                    'defect' => $request->input('drl_defect')[$value],
                    'shop' => $request->input('drl_shop')[$value],
                    'weight' => $request->input('drl_weight')[$value],
                    'lot_job' => $request->input('drl_lot_job')[$value],
                    'model' => $request->input('drl_model')[$value],
                    'date' => $date,
                    'report_type' => 'Drl',
                    'created_at' => now(),
                    'updated_at' => now(),
                ];
            }
        }
        if (!empty($request->input('drr_check'))) {

            foreach ($request->input('drr_check') as $key => $value) {
                $drr_data[] = array(
                    'ref_id' =>  $value,
                    'defect' => $request->input('drr_defect')[$value],
                    'shop' => $request->input('drr_shop')[$value],
                    'weight' => $request->input('drr_weight')[$value],
                    'lot_job' => $request->input('drr_lot_job')[$value],
                    'model' => $request->input('drr_model')[$value],
                    'date' => $date,
                    'report_type' => 'Drr',
                    'created_at' => now(),
                    'updated_at' => now(),
                );

            }
        }
        if (!empty($request->input('care_check'))) {

            foreach ($request->input('care_check') as $key => $value) {
                $care_data[] = array(
                    'ref_id' =>  $value,
                    'defect' => $request->input('care_defect')[$value],
                    'shop' => $request->input('care_shop')[$value],
                    'weight' => $request->input('care_weight')[$value],
                    'lot_job' => $request->input('care_lot_job')[$value],
                    'model' => $request->input('care_model')[$value],
                    'date' => $date,
                    'report_type' => 'Care',
                    'created_at' => now(),
                    'updated_at' => now(),
                );

            }
        }
        if (!empty($request->input('gca_defect'))) {

            foreach ($request->input('gca_defect') as $key => $value) {
                $gca_data[] = array(
                    'ref_id' =>  0,
                    'defect' => $request->input('gca_defect')[$key],
                    'shop' => $request->input('shop_captured')[$key],
                    'weight' => $request->input('weight')[$key],
                    'lot_job' => $request->input('lot_job')[$key],
                    'model' => $request->input('model')[$key],
                    'date' => $date,
                    'report_type' => 'gca_cv',
                    'created_at' => now(),
                    'updated_at' => now(),
                );

            }
        }

        if (!empty($request->input('lcv_gca_defect'))) {

            foreach ($request->input('lcv_gca_defect') as $key => $value) {
                $gca_lcv_data[] = array(
                    'ref_id' =>  0,
                    'defect' => $request->input('lcv_gca_defect')[$key],
                    'shop' => $request->input('lcv_shop_captured')[$key],
                    'weight' => $request->input('lcv_weight')[$key],
                    'lot_job' => $request->input('lcv_lot_job')[$key],
                    'model' => $request->input('lcv_model')[$key],
                    'date' => $date,
                    'report_type' => 'gca_lcv',
                    'created_at' => now(),
                    'updated_at' => now(),
                );

            }
        }


        // Repeat the same process for other data types (drr, care, gca, gca_lcv)

        $master = array_merge($drl_data, $drr_data, $care_data, $gca_data, $gca_lcv_data);

        if (!empty($master)) {
            DB::beginTransaction();

            // Remove existing records for the given date
            FcaBoard::where('date', $date)->delete();

            // Insert new records
            FcaBoard::insert($master);

            DB::commit();

            $output = [
                'success' => true,
                'msg' => 'Report Created Successfully'
            ];
        } else {
            $output = [
                'success' => false,
                'msg' => "It appears you have forgotten to complete something",
            ];
        }
    } catch (\Exception $e) {
        DB::rollBack();
        $bug = $e->getMessage();
        $output = [
            'success' => false,
            'msg' => $bug
        ];
    }

    return $output;





    }
    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }
    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }
    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }
    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }
}
